@page "/asynchronous_tree_view"
<SourceCodeLink Repository="Blazor.TreeViews" Page="@nameof(AsynchronousTreeView)" />

<h4>Custom loading template</h4>
<TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems">
    <ItemTemplate>
        @context.Item.Self
    </ItemTemplate>
    <LoadingTemplate>
        Loading...
    </LoadingTemplate>
</TreeViewAsync>

@code { 

    private List<Item> SelectedItems { get; set; }

    private async Task<List<Item>> GetChildrenAsync(Item i)
    {
        if (i == null) return new List<Item>{new Item{Self = "A"}, new Item { Self = "A" } };
        await Task.Delay(1000);
        return i.Self switch
        {
            "A" => new List<Item> {new Item {Self = "B1"}, new Item {Self = "B2"}},
            "B1" => new List<Item> {new Item {Self = "C1"}, new Item {Self = "C2"}},
            "B2" => new List<Item> {new Item {Self = "C1"}},
            "C1" => new List<Item> {new Item {Self = "D1"}},
            _ => new List<Item>()
        };
    }

    private async Task<bool> HasChildrenAsync(Item i)
    {
        if (i == null) return true;
        await Task.Delay(1000);
        switch (i.Self)
        {
            case "C2":
            case "D1":
                return false;
            default:
                return true;
        }
    }

    private class Item
    {
        public string Self { get; set; }
    }
}
