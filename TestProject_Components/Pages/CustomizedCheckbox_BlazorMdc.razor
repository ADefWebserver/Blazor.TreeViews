
<h4>BlazorMdc</h4>

@code {
    private static readonly object no_render = new object();
    private static readonly CheckboxFragment checkbox_template_blazor_mdc =
    CheckboxFragmentConverter.ToCheckboxFragment((value, indeterminate, value_changed, indeterminate_changed) =>
        (builder) =>
        {
            builder.OpenComponent<BlazorMdc.MTCheckbox>(0);
            builder.AddAttribute(1, nameof(BlazorMdc.MTCheckbox.Value), value);
            builder.AddAttribute(2, nameof(BlazorMdc.MTCheckbox.ValueChanged), EventCallback.Factory.Create<bool>(no_render, value_changed));
            builder.AddAttribute(3, nameof(BlazorMdc.MTCheckbox.IsIndeterminate), indeterminate);
            builder.AddAttribute(4, nameof(BlazorMdc.MTCheckbox.IsIndeterminateChanged), EventCallback.Factory.Create<bool>(no_render, indeterminate_changed));
            builder.AddEventStopPropagationAttribute(7, "onclick", true);
            builder.CloseComponent();
        });
}

<TreeView Items="Items" GetParent="GetParent" AllowSelection="true" CheckboxTemplate="checkbox_template_blazor_mdc" />

@code {
    private List<string> Items = new List<string>
    {
        "1",
        "1.1",
        "1.2",
        "2",
        "3",
        "3.1",
        "3.1.1",
        "3.1.2"
    };
    private string GetParent(string item)
    {
        var last_period = item.LastIndexOf('.');
        if (last_period < 0)
        {
            return null; // no parent
        }
        else
        {
            return item.Substring(0, last_period);
        }
    }
}
