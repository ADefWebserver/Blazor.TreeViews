@using Microsoft.JSInterop
@inject IJSRuntime js

<input @ref="checkbox" type="checkbox" checked="@Value" disabled="@Disabled" @onclick="() => { Value = (Value != true); ValueChanged?.Invoke(Value); }" @onclick:stopPropagation />

@code {
    private ElementReference checkbox;
    //private bool old_indeterminate = true;
    [Parameter] public bool Value { get; set; }
    [Parameter] public Action<bool> ValueChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Indeterminate { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (old_indeterminate != Indeterminate)
        //{
        //    old_indeterminate = Indeterminate;
        await js.InvokeVoidAsync("eval", $"document.querySelector('[_bl_{checkbox.Id}=\"\"]').indeterminate = {(Indeterminate ? "true" : "false")}");
        //}
        await base.OnAfterRenderAsync(firstRender);
    }
}
