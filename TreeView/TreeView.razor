@typeparam T
@using Excubo.Blazor.TreeViews.__Internal

<CascadingValue Value="this" IsFixed="true">
    @if (GetParent != null)
    {
        var filtered = FilterBy(Items);
        var root_elements = filtered.Where(i => GetParent(i) == null).ToList();
        var non_root_elements = filtered.Where(i => GetParent(i) != null).ToList();
        <OrderedListByGetParent Parental="root_elements" Remaining="non_root_elements" GetParent="GetParent" />
    }
    else if (GetChildren != null)
    {
        var filtered = FilterBy(Items).ToList();
        <OrderedListByGetChildren Parental="filtered" GetChildren="GetChildren" />
    }
</CascadingValue>

@code
{
    [Parameter] public List<T> Items { get; set; }
    /// <summary>
    /// If this parameter is set, the TreeView is populated by grouping items under their respective parent. Items which have no parent (null) are put at the top of the hierarchy.
    /// Alternatively, use <cref="GetChildren" />.
    /// </summary>
    [Parameter] public Func<T, T> GetParent { get; set; }
    /// <summary>
    /// If this parameter is set, the TreeView is populated by all the items in Items, placing all children returned by this method under the respective item in the Items list.
    /// Alternatively, use GetParent.
    /// </summary>
    [Parameter] public Func<T, List<T>> GetChildren { get; set; }
    [Parameter] public RenderFragment<ItemContent<T>> ItemTemplate { get; set; } = (ItemContent<T> value) =>@<text>@value.Item</text>;
    [Parameter] public Func<IEnumerable<T>, IEnumerable<T>> SortBy { get; set; } = (e) => e;
    [Parameter] public Func<IEnumerable<T>, IEnumerable<T>> FilterBy { get; set; } = (e) => e;
    [Parameter] public bool AllowSelection { get; set; }
    [Parameter] public List<T> SelectedItems { get; set; } = new List<T>();
    [Parameter] public EventCallback<List<T>> SelectedItemsChanged { get; set; }
    [Parameter] public CheckboxFragment CheckboxTemplate { get; set; } = (value, value_changed) => @<DefaultCheckbox Value="value" ValueChanged="value_changed"/>;
    [Parameter] public bool InitiallyCollapsed { get; set; }
    internal void UpdateSelection(T item, bool? selected)
    {
        if (selected == null)
        {
            return;
        }
        if (SelectedItems == null)
        {
            SelectedItems = new List<T>();
        }
        if (selected == false)
        {
            SelectedItems.Remove(item);
            SelectedItemsChanged.InvokeAsync(SelectedItems);
        }
        else if (selected == true && !SelectedItems.Contains(item))
        {
            SelectedItems.Add(item);
            SelectedItemsChanged.InvokeAsync(SelectedItems);
        }
    }
}
